import os
import sys
import subprocess
import modules.globalConfig as globalConfig
from datetime import datetime

# Determine the directory separator based on the operating system.
# Windows uses backslash (\), Linux and Mac use forward slash (/)
DIRECTORY_SEPARATOR = "\\" if (sys.platform.lower() == "win32") else "/"


def clear_screen():
    """
    Clears the terminal/console screen.
    On Windows, executes 'cls', on Linux/Mac executes 'clear'.
    """
    # Execute appropriate system command depending on the platform
    os.system("cls") if (sys.platform.lower() == "win32") else os.system("clear")


def colorizeInput(text: str):
    """
    Prints a prompt message without newline and flushes output immediately,
    then waits for user input.

    Args:
        text (str): The prompt text to display

    Returns:
        str: The string entered by the user
    """
    print(text, end="", flush=True)  # Print prompt without newline and flush output
    return input()  # Capture user input


def execute(command: str):
    """
    Executes a shell/system command in a subprocess with suppressed console on Windows.

    Args:
        command (str): The command to execute

    Returns:
        bool: True if command executed successfully (return code 0), False otherwise
    """
    try:
        # Define standard arguments for subprocess execution
        kwargs = {
            "shell": True,  # Run command through the shell
            "stdout": subprocess.PIPE,  # Capture standard output
            "stderr": subprocess.PIPE,  # Capture standard error
            "text": True,  # Return outputs as strings
        }

        # On Windows, prevent creation of a new console window
        if globalConfig.OS == "win":
            kwargs["creationflags"] = subprocess.CREATE_NO_WINDOW

        # Run the command
        result = subprocess.run(command, **kwargs)

        # Return True if command executed successfully
        if result.returncode == 0:
            return True
        else:
            return False

    except:
        # Catch any exceptions (e.g., invalid command) and return False
        return False


def escape_newlines_block(text: str):
    """
    Escapes newlines in a multi-line string for safe file writing.
    Converts Windows CRLF (\r\n) to LF (\n), strips extra leading/trailing newlines,
    and replaces each remaining newline with a literal '\\n'.

    Args:
        text (str): Multi-line string to escape

    Returns:
        str: Escaped string with literal '\n' characters at the start and end
    """
    text = text.replace("\r\n", "\n")  # Normalize Windows line endings to LF
    core = text.strip("\n")  # Remove leading/trailing newlines
    escaped = core.replace("\n", r"\n")  # Replace each newline with literal '\n'
    return r"\n" + escaped + r"\n"  # Return escaped string wrapped in '\n'


def generateINFO():
    """
    Generates a header block for DNS configuration files.
    Includes program name, generation date, author name, and GitHub URL.

    Returns:
        str: Escaped header string suitable for writing to a file
    """
    info = f"""
#  Generated By Charon DNS Changer v1.1
#  Date    :  {(datetime.now().strftime("%Y-%m-%d %H:%M"))}
#  Author  :  AmirHossein Ghanami (Ch4120N)
#  GitHub  :  GitHub.Com/Ch4120N
"""
    # Escape newlines before returning for safe use in Linux resolv.conf or similar
    return escape_newlines_block(info)
